durable, resumable, asynchronous file transfer
==============================================

++statsMgr().stats(fd|id).stat;

--

- rx to fill bufs
- header inline w/data, padded
- tail writes padded by reader/sender
    - rx can issue mixed inner/tail writes w/o leaking data from other files rx'd into megabuf
- megabuf from pool
    - rx fills
    - rx walks through, creating & enqueuing subbufs
    - subbufs are megabuf markers + shared ptr to megabuf
    - all subbufs freed, megabuf returns to pool
- rx to open files on demand instead of holding all descs open for duration of xfer
- rx to track completion for each file, truncate at end & close

- spdk/dpdk

- usability
    - [ ] multiple rx (persistent receiver)
    - [ ] bind to i/f
    - [ ] bind to ANY
    - [ ] stats
    - [ ] progress
        - ref rsync:
            11,467,096,064  68%   24.96MB/s    0:03:26  kk
        - session?
    - [ ] tui
    - [ ] configurable buf size, r/w/tx/rx thd counts
    - [ ] client/server (node) discovery
    - [ ] link/interface discovery

--
https://github.com/ValveSoftware/GameNetworkingSockets
    - ack vector: DCCP (RFC 4340, section 11.4)
    - https://gafferongames.com/post/reliable_ordered_messages/
